apiversion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: nginx-prod-dev-prod
  namespace: default
spec:
  chart:
    chart: nginx-prod-dev-prod
    reconcilestrategy: ChartVersion
    version: 15.2.1
    sourceref:
      kind: HelmRepository
      name: ""
  interval: 5m0s
  releasename: nginx-prod-dev-prod
  values:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: ""
      minReplicas: ""
      targetCPU: ""
      targetMemory: ""
    cloneStaticSiteFromGit:
      branch: ""
      enabled: false
      extraEnvVars: []
      extraVolumeMounts: []
      gitClone:
        args: []
        command: []
      gitSync:
        args: []
        command: []
        resources:
          limits: {}
          requests: {}
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/git
        tag: 2.41.0-debian-11-r76
      interval: 60
      repository: ""
    clusterDomain: cluster.local
    command: []
    commonAnnotations: {}
    commonLabels: {}
    containerPorts:
      http: 8080
      https: ""
    containerSecurityContext:
      enabled: false
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    diagnosticMode:
      args:
      - infinity
      command:
      - sleep
      enabled: false
    existingServerBlockConfigmap: ""
    extraContainerPorts: []
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      imageRegistry: ""
    healthIngress:
      annotations: {}
      enabled: false
      extraHosts: []
      extraPaths: []
      extraRules: []
      extraTls: []
      hostname: example.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    image:
      debug: false
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/nginx
      tag: 1.25.2-debian-11-r3
    ingress:
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraPaths: []
      extraRules: []
      extraTls: []
      hostname: nginx.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    initContainers: []
    kubeVersion: ""
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      enabled: false
      image:
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/nginx-exporter
        tag: 0.11.0-debian-11-r324
      podAnnotations: {}
      port: ""
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      resources:
        limits: {}
        requests: {}
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: '{{ .Values.metrics.service.port }}'
          prometheus.io/scrape: "true"
        port: 9113
      serviceMonitor:
        enabled: false
        honorLabels: false
        interval: ""
        jobLabel: ""
        labels: {}
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scrapeTimeout: ""
        selector: {}
    nameOverride: ""
    namespaceOverride: ""
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: 0
      minAvailable: 1
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: false
      fsGroup: 1001
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    revisionHistoryLimit: 10
    schedulerName: ""
    serverBlock: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
        https: ""
      ports:
        http: 80
        https: 443
      sessionAffinity: None
      sessionAffinityConfig: {}
      targetPort:
        http: http
        https: https
      type: LoadBalancer
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: false
      name: ""
    sidecarSingleProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    staticSiteConfigmap: ""
    staticSitePVC: ""
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
